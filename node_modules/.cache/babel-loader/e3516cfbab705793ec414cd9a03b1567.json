{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jorge\\\\Desktop\\\\proyectos\\\\1react\\\\bookshooks\\\\bookshooks\\\\src\\\\pages\\\\Checkout.js\";\nimport React from \"react\";\nimport { CartContext } from \"../context/cart\";\nimport { UserContext } from \"../context/user\";\nimport { useHistory } from \"react-router-dom\";\nimport EmptyCart from \"../components/Cart/EmptyCart\";\nimport { CardElement, StripeProvider, Elements, injectStripe } from \"react-stripe-elements\";\nimport submitOrder from \"../strapi/submitOrder\";\n\nfunction Checkout(props) {\n  const {\n    cart,\n    total,\n    clearCart\n  } = React.useContext(CartContext);\n  const {\n    user,\n    showAlert,\n    hideAlert,\n    alert\n  } = React.useContext(UserContext);\n  const history = useHistory(); // state values\n\n  const [name, setName] = React.useState(\"\");\n  const [error, setError] = React.useState(\"\");\n  const isEmpty = !name || alert.show;\n\n  async function handleSubmit(e) {\n    showAlert({\n      msg: \"submitting order... please wait\"\n    });\n    e.preventDefault();\n    const response = await props.stripe.createToken().catch(error => console.log(error));\n    const {\n      token\n    } = response;\n\n    if (token) {\n      setError(\"\");\n      const {\n        id\n      } = token;\n      let order = await submitOrder({\n        name: name,\n        total: total,\n        items: cart,\n        stripeTokenId: id,\n        userToken: user.token\n      });\n\n      if (order) {\n        showAlert({\n          msg: \"your order is complete\"\n        });\n        clearCart();\n        history.push(\"/\");\n        return;\n      } else {\n        showAlert({\n          msg: \"there was an error with your order. please try again!\",\n          type: \"danger\"\n        });\n      }\n    } else {\n      hideAlert();\n      setError(response.error.message);\n    }\n  }\n\n  if (cart.length < 1) return /*#__PURE__*/React.createElement(EmptyCart, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 31\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: \"section form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, \"checkout\"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"checkout-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, \"order total : \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 25\n    }\n  }, \"$\", total)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, \"name\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"name\",\n    value: name,\n    onChange: e => {\n      setName(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stripe-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"card-element\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, \"Credit or Debit Cart\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"stripe-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, \"Test using this credit card : \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 43\n    }\n  }, \"4242 4242 4242 4242\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }), \"enter any 5 digits for the zip code\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }), \"enter any 3 digits for the CVC\")), /*#__PURE__*/React.createElement(CardElement, {\n    className: \"card-element\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }), error && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"form-empty\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 19\n    }\n  }, error), isEmpty ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"form-empty\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, \"please fill out name field\") : /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    onClick: handleSubmit,\n    className: \"btn btn-primary btn-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, \"submit\")));\n}\n\nconst CardForm = injectStripe(Checkout);\n\nconst StripeWrapper = () => {\n  return /*#__PURE__*/React.createElement(StripeProvider, {\n    apiKey: \"pk_test_RmWPHoQAmlEf6RiOlsMRkEeJ00XzgNQe2k\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Elements, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default StripeWrapper;","map":{"version":3,"sources":["C:/Users/Jorge/Desktop/proyectos/1react/bookshooks/bookshooks/src/pages/Checkout.js"],"names":["React","CartContext","UserContext","useHistory","EmptyCart","CardElement","StripeProvider","Elements","injectStripe","submitOrder","Checkout","props","cart","total","clearCart","useContext","user","showAlert","hideAlert","alert","history","name","setName","useState","error","setError","isEmpty","show","handleSubmit","e","msg","preventDefault","response","stripe","createToken","catch","console","log","token","id","order","items","stripeTokenId","userToken","push","type","message","length","target","value","CardForm","StripeWrapper"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { CartContext } from \"../context/cart\";\r\nimport { UserContext } from \"../context/user\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport EmptyCart from \"../components/Cart/EmptyCart\";\r\nimport {\r\n  CardElement,\r\n  StripeProvider,\r\n  Elements,\r\n  injectStripe\r\n} from \"react-stripe-elements\";\r\nimport submitOrder from \"../strapi/submitOrder\";\r\n\r\nfunction Checkout(props) {\r\n  const { cart, total, clearCart } = React.useContext(CartContext);\r\n  const { user, showAlert, hideAlert, alert } = React.useContext(UserContext);\r\n  const history = useHistory();\r\n  // state values\r\n  const [name, setName] = React.useState(\"\");\r\n  const [error, setError] = React.useState(\"\");\r\n  const isEmpty = !name || alert.show;\r\n  async function handleSubmit(e) {\r\n    showAlert({ msg: \"submitting order... please wait\" });\r\n    e.preventDefault();\r\n    const response = await props.stripe\r\n      .createToken()\r\n      .catch(error => console.log(error));\r\n\r\n    const { token } = response;\r\n    if (token) {\r\n      setError(\"\");\r\n      const { id } = token;\r\n\r\n      let order = await submitOrder({\r\n        name: name,\r\n        total: total,\r\n        items: cart,\r\n        stripeTokenId: id,\r\n        userToken: user.token\r\n      });\r\n\r\n      if (order) {\r\n        showAlert({ msg: \"your order is complete\" });\r\n        clearCart();\r\n        history.push(\"/\");\r\n        return;\r\n      } else {\r\n        showAlert({\r\n          msg: \"there was an error with your order. please try again!\",\r\n          type: \"danger\"\r\n        });\r\n      }\r\n    } else {\r\n      hideAlert();\r\n      setError(response.error.message);\r\n    }\r\n  }\r\n  if (cart.length < 1) return <EmptyCart />;\r\n  return (\r\n    <section className=\"section form\">\r\n      <h2 className=\"section-title\">checkout</h2>\r\n      <form className=\"checkout-form\">\r\n        <h3>\r\n          order total : <span>${total}</span>\r\n        </h3>\r\n        {/* single input */}\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"name\">name</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"name\"\r\n            value={name}\r\n            onChange={e => {\r\n              setName(e.target.value);\r\n            }}\r\n          />\r\n        </div>\r\n        {/* end of single input */}\r\n        {/* card element */}\r\n        <div className=\"stripe-input\">\r\n          <label htmlFor=\"card-element\">Credit or Debit Cart</label>\r\n          <p className=\"stripe-info\">\r\n            Test using this credit card : <span>4242 4242 4242 4242</span>\r\n            <br />\r\n            enter any 5 digits for the zip code\r\n            <br />\r\n            enter any 3 digits for the CVC\r\n          </p>\r\n        </div>\r\n        {/* end of card element */}\r\n        {/* STRIPE ELEMENTS */}\r\n        <CardElement className=\"card-element\"></CardElement>\r\n        {/* stripe errors */}\r\n        {error && <p className=\"form-empty\">{error}</p>}\r\n        {/* empty value */}\r\n        {isEmpty ? (\r\n          <p className=\"form-empty\">please fill out name field</p>\r\n        ) : (\r\n          <button\r\n            type=\"submit\"\r\n            onClick={handleSubmit}\r\n            className=\"btn btn-primary btn-block\"\r\n          >\r\n            submit\r\n          </button>\r\n        )}\r\n      </form>\r\n    </section>\r\n  );\r\n}\r\nconst CardForm = injectStripe(Checkout);\r\n\r\nconst StripeWrapper = () => {\r\n  return (\r\n    <StripeProvider apiKey=\"pk_test_RmWPHoQAmlEf6RiOlsMRkEeJ00XzgNQe2k\">\r\n      <Elements>\r\n        <CardForm></CardForm>\r\n      </Elements>\r\n    </StripeProvider>\r\n  );\r\n};\r\n\r\nexport default StripeWrapper;\r\n"]},"metadata":{},"sourceType":"module"}